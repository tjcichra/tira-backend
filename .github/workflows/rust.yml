name: docker

on:
  pull_request:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Repo metadata
        id: repo
        uses: actions/github-script@v7
        with:
          script: |
            return context.repo.repo
      - name: Prepare
        id: prep
        run: |
          DOCKER_IMAGE=ghcr.io/tjcichra/tira_backend
          VERSION=noop
          if [ "${{ github.event_name }}" = "schedule" ]; then
            VERSION=nightly
          elif [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          elif [[ $GITHUB_REF == refs/heads/* ]]; then
            VERSION=$(echo ${GITHUB_REF#refs/heads/} | sed -r 's#/+#-#g')
            if [ "${{ github.event.repository.default_branch }}" = "$VERSION" ]; then
              VERSION=latest
            fi
          elif [[ $GITHUB_REF == refs/pull/* ]]; then
            VERSION=pr-${{ github.event.number }}
          fi
          TAGS="${DOCKER_IMAGE}:${VERSION}"
          if [[ $VERSION =~ ^v[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
            MINOR=${VERSION%.*}
            MAJOR=${MINOR%.*}
            TAGS="$TAGS,${DOCKER_IMAGE}:${MINOR},${DOCKER_IMAGE}:${MAJOR},${DOCKER_IMAGE}:latest"
          elif [ "${{ github.event_name }}" = "push" ]; then
            TAGS="$TAGS,${DOCKER_IMAGE}:sha-${GITHUB_SHA::8}"
          fi
          echo ::set-output name=version::${VERSION}
          echo ::set-output name=tags::${TAGS}
          echo ::set-output name=created::$(date -u +'%Y-%m-%dT%H:%M:%SZ')
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to ghcr.io
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Cache Cargo binaries
        uses: actions/cache@v4
        with:
          path: ~/.cargo/bin
          key: ${{ runner.os }}-cargo-bin
      - name: Cache target directory
        id: cache-target
        uses: actions/cache@v4
        with:
          path: api/target
          key: ${{ runner.os }}-target
      - name: Install sqlx-cli
        run: command -v sqlx >/dev/null 2>&1 || cargo install sqlx-cli
      - name: Run cockroach in the background for sqlx
        run: docker-compose run -d cockroach-ci
      - name: Create the database
        run: sleep 10 && cd api && sqlx database create
      - name: Run migrations
        run: cd api && sqlx migrate run
      - name: Run prepare for build steps
        run: cd api && cargo sqlx prepare && rm .env
      - name: Build for aarch64
        uses: jrcichra/cargo-action@main
        with:
          use-cross: true
          command: build
          args: --target aarch64-unknown-linux-musl --release
          directory: api
      - name: Build for x86_64
        uses: jrcichra/cargo-action@main
        with:
          use-cross: true
          command: build
          args: --target x86_64-unknown-linux-musl --release
          directory: api
      - uses: docker/build-push-action@v5
        with:
          context: ./api
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.prep.outputs.tags }}
          cache-from: type=registry,ref=ghcr.io/tjcichra/tira_backend:buildcache
          cache-to: type=registry,ref=ghcr.io/tjcichra/tira_backend:buildcache,mode=max
          labels: |
            org.opencontainers.image.title=${{ fromJson(steps.repo.outputs.result).name }}
            org.opencontainers.image.description=${{ fromJson(steps.repo.outputs.result).description }}
            org.opencontainers.image.url=${{ fromJson(steps.repo.outputs.result).html_url }}
            org.opencontainers.image.source=${{ fromJson(steps.repo.outputs.result).clone_url }}
            org.opencontainers.image.version=${{ steps.prep.outputs.version }}
            org.opencontainers.image.created=${{ steps.prep.outputs.created }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.licenses=${{ fromJson(steps.repo.outputs.result).license.spdx_id }}
